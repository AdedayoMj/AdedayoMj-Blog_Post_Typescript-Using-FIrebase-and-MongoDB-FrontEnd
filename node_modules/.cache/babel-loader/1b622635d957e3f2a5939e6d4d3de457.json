{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/quiz_run/quizrun/src/pages/login.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport UserContext from '../context/user';\nimport { Authenticate, SignInWithSocialMedia as SocialMediaPopup } from '../modules/auth';\nimport logging from '../config/logging';\nimport CenterPiece from '../components/centerpiece';\nimport { Button, Card, CardBody, CardHeader, Container } from 'reactstrap';\nimport ErrorText from '../components/error_text';\nimport LoadingComponent from '../components/loading_components/indes';\nimport { Providers } from '../config/firebase';\nimport Naviagtion from '../components/navigation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginPage = props => {\n  _s();\n\n  const [authenticating, setAuthenticating] = useState(false);\n  const [error, setError] = useState('');\n  const userContext = useContext(UserContext);\n  const history = useHistory();\n  const isLogin = window.location.pathname.includes('login');\n\n  const signInWithSocialMedia = provider => {\n    if (error !== '') setError('');\n    setAuthenticating(true);\n    SocialMediaPopup(provider).then(async result => {\n      logging.info(result);\n      let user = result.user;\n\n      if (user) {\n        let uid = user.uid;\n        let name = user.displayName;\n\n        if (name) {\n          try {\n            let fire_token = await user.getIdToken();\n            /**if we get a token, auth with the backup */\n\n            Authenticate(uid, name, fire_token, (error, _user) => {\n              if (error) {\n                setError(error);\n                setAuthenticating(false);\n              } else if (_user) {\n                userContext.userDispatch({\n                  type: 'login',\n                  payload: {\n                    user: _user,\n                    fire_token\n                  }\n                });\n                history.push('/');\n              }\n            });\n          } catch (error) {\n            setError('Invalid token.');\n            logging.error(error);\n            setAuthenticating(false);\n          }\n        } else {\n          /** \n           * We can set these manually with a new form \n           * For example, the Twitter provider sometimes\n           * does not provide a username as some users sign\n           * up with a phone number.  Here you could ask\n           * them to provide a name that would be displayed\n           * on this website.\n           * */\n          setError('The identify provider is missing a display name.');\n          setAuthenticating(false);\n        }\n      } else {\n        setError('The social media provider does not have enough information. Please try a different provider.');\n        setAuthenticating(false);\n      }\n    }).catch(error => {\n      logging.error(error);\n      setAuthenticating(false);\n      setError(error.message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    className: \"p-0\",\n    children: [/*#__PURE__*/_jsxDEV(Naviagtion, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CenterPiece, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          children: isLogin ? 'Login' : 'Sign Up'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n          children: [/*#__PURE__*/_jsxDEV(ErrorText, {\n            error: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            block: true,\n            disabled: authenticating,\n            onClick: () => signInWithSocialMedia(Providers.google),\n            style: {\n              backgroundColor: '#222454',\n              borderColor: '#222454'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fab fa-google mr-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 25\n            }, this), \" Sign \", isLogin ? 'in' : 'up', \" with Google\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this), authenticating && /*#__PURE__*/_jsxDEV(LoadingComponent, {\n            card: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 40\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LoginPage, \"Mt46UVMxPc76Bp9bwsDcYYaQP3s=\", false, function () {\n  return [useHistory];\n});\n\n_c = LoginPage;\nexport default LoginPage; // import axios from 'axios';\n// import React, { SyntheticEvent, useState } from 'react'\n// import { Redirect } from 'react-router-dom';\n// const Login=()=> {\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [redirect, setRedirect] = useState(false)\n//   const [errors, setError]=useState(\"\")\n//   const handleLogin = async (e: SyntheticEvent) => {\n//     e.preventDefault();\n//     axios({\n//       url: \"/login\",\n//       method: \"POST\",\n//       data: JSON.stringify({\n//         email,\n//         password,\n//       }),\n//     })\n//       .then(async (res) => {\n//         console.log(res);\n//         const content = await res;\n//         const readData=content.data\n//         if (readData.status===200){\n//             setRedirect(true)\n//         }\n//         if(readData.status===401 && readData.message===\"Unauthorized\"){\n//           const response=`Please provide a valid email and password!`\n//           setError(response)\n//         }\n//       })\n//       .catch((err) => {\n//         setError(err.data.message)\n//         console.log(err.data);\n//       });\n//   };\n//   if(redirect){\n//     return  <Redirect to =\"/\"/>;\n//   }\n//     return (\n//       <div>\n//       <div className=\"err\">\n//         {errors}\n//       </div>\n//         <form onSubmit={handleLogin}>\n//         <h1 className=\"h3 mb-3 fw-normal\">Login</h1>\n//         <input\n//           type=\"email\"\n//           className=\"form-control\"\n//           placeholder=\"Email address\"\n//           required\n//           onChange={(e) => setEmail(e.target.value)}\n//         />\n//         <input\n//           type=\"password\"\n//           className=\"form-control\"\n//           required\n//           placeholder=\"Password\"\n//           onChange={(e) => setPassword(e.target.value)}\n//         />\n//         <button\n//           className=\"w-100 btn btn-lg btn-primary custom-btn\"\n//           type=\"submit\"\n//         >\n//           Login\n//         </button>\n//       </form>\n//       </div>\n//     )\n// }\n// export default  Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["/Users/macbook/quiz_run/quizrun/src/pages/login.tsx"],"names":["React","useContext","useState","useHistory","UserContext","Authenticate","SignInWithSocialMedia","SocialMediaPopup","logging","CenterPiece","Button","Card","CardBody","CardHeader","Container","ErrorText","LoadingComponent","Providers","Naviagtion","LoginPage","props","authenticating","setAuthenticating","error","setError","userContext","history","isLogin","window","location","pathname","includes","signInWithSocialMedia","provider","then","result","info","user","uid","name","displayName","fire_token","getIdToken","_user","userDispatch","type","payload","push","catch","message","google","backgroundColor","borderColor"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AAGA,SAASC,YAAT,EAAuBC,qBAAqB,IAAIC,gBAAhD,QAAuE,iBAAvE;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,EAAiCC,UAAjC,EAA6CC,SAA7C,QAA8D,YAA9D;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,gBAAP,MAA6B,wCAA7B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;;AAGA,MAAMC,SAA6C,GAACC,KAAK,IAAE;AAAA;;AAEvD,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCpB,QAAQ,CAAU,KAAV,CAApD;AACA,QAAM,CAACqB,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAS,EAAT,CAAlC;AAEA,QAAMuB,WAAW,GAAGxB,UAAU,CAACG,WAAD,CAA9B;AACA,QAAMsB,OAAO,GAAGvB,UAAU,EAA1B;AACA,QAAMwB,OAAO,GAAGC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,QAAzB,CAAkC,OAAlC,CAAhB;;AAGA,QAAMC,qBAAqB,GAAIC,QAAD,IAA0C;AACpE,QAAIV,KAAK,KAAK,EAAd,EAAkBC,QAAQ,CAAC,EAAD,CAAR;AAClBF,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAf,IAAAA,gBAAgB,CAAC0B,QAAD,CAAhB,CACCC,IADD,CACM,MAAOC,MAAP,IAAkB;AACpB3B,MAAAA,OAAO,CAAC4B,IAAR,CAAaD,MAAb;AAEA,UAAIE,IAAI,GAAGF,MAAM,CAACE,IAAlB;;AACA,UAAIA,IAAJ,EACA;AACI,YAAIC,GAAG,GAAGD,IAAI,CAACC,GAAf;AACA,YAAIC,IAAI,GAAGF,IAAI,CAACG,WAAhB;;AAGJ,YAAID,IAAJ,EACA;AACI,cACA;AACI,gBAAIE,UAAU,GAAG,MAAMJ,IAAI,CAACK,UAAL,EAAvB;AAEA;;AAEArC,YAAAA,YAAY,CAACiC,GAAD,EAAMC,IAAN,EAAYE,UAAZ,EAAwB,CAAClB,KAAD,EAAQoB,KAAR,KAAkB;AAClD,kBAAIpB,KAAJ,EACA;AACIC,gBAAAA,QAAQ,CAACD,KAAD,CAAR;AACAD,gBAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH,eAJD,MAKK,IAAIqB,KAAJ,EACL;AACIlB,gBAAAA,WAAW,CAACmB,YAAZ,CAAyB;AAAEC,kBAAAA,IAAI,EAAE,OAAR;AAAiBC,kBAAAA,OAAO,EAAE;AAAET,oBAAAA,IAAI,EAAEM,KAAR;AAAeF,oBAAAA;AAAf;AAA1B,iBAAzB;AACAf,gBAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACH;AACJ,aAXW,CAAZ;AAYH,WAlBD,CAmBA,OAAOxB,KAAP,EACA;AACIC,YAAAA,QAAQ,CAAC,gBAAD,CAAR;AACAhB,YAAAA,OAAO,CAACe,KAAR,CAAcA,KAAd;AACAD,YAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH;AACJ,SA3BD,MA6BI;AACI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACoBE,UAAAA,QAAQ,CAAC,kDAAD,CAAR;AACAF,UAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH;AACR,OA/CG,MAgDJ;AACIE,QAAAA,QAAQ,CAAC,8FAAD,CAAR;AACAF,QAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH;AACA,KAzDD,EA0DC0B,KA1DD,CA0DOzB,KAAK,IAAI;AACZf,MAAAA,OAAO,CAACe,KAAR,CAAcA,KAAd;AACAD,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAE,MAAAA,QAAQ,CAACD,KAAK,CAAC0B,OAAP,CAAR;AACH,KA9DD;AA+DH,GAlED;;AAmEA,sBACI,QAAC,SAAD;AAAW,IAAA,KAAK,MAAhB;AAAiB,IAAA,SAAS,EAAC,KAA3B;AAAA,4BACA,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADA,eAEA,QAAC,WAAD;AAAA,6BACI,QAAC,IAAD;AAAA,gCACI,QAAC,UAAD;AAAA,oBACKtB,OAAO,GAAG,OAAH,GAAa;AADzB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII,QAAC,QAAD;AAAA,kCACI,QAAC,SAAD;AAAW,YAAA,KAAK,EAAEJ;AAAlB;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,MAAD;AACI,YAAA,KAAK,MADT;AAEI,YAAA,QAAQ,EAAEF,cAFd;AAGI,YAAA,OAAO,EAAE,MAAMW,qBAAqB,CAACf,SAAS,CAACiC,MAAX,CAHxC;AAII,YAAA,KAAK,EAAE;AAAEC,cAAAA,eAAe,EAAC,SAAlB;AAA6BC,cAAAA,WAAW,EAAE;AAA1C,aAJX;AAAA,oCAMI;AAAG,cAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,oBANJ,YAMiDzB,OAAO,GAAG,IAAH,GAAU,IANlE;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,EAUKN,cAAc,iBAAI,QAAC,gBAAD;AAAkB,YAAA,IAAI,EAAE;AAAxB;AAAA;AAAA;AAAA;AAAA,kBAVvB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH,CArGD;;GAAMF,S;UAMchB,U;;;KANdgB,S;AAuGN,eAAeA,SAAf,C,CAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["\nimport React, { useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom';\nimport UserContext from '../context/user';\nimport firebase from 'firebase';\nimport IPageProps from \"../interfaces/pages\";\nimport { Authenticate, SignInWithSocialMedia as SocialMediaPopup} from '../modules/auth';\nimport logging from '../config/logging';\nimport CenterPiece from '../components/centerpiece';\nimport { Button, Card, CardBody, CardHeader, Container } from 'reactstrap';\nimport ErrorText from '../components/error_text';\nimport LoadingComponent from '../components/loading_components/indes';\nimport { Providers } from '../config/firebase';\nimport Naviagtion from '../components/navigation';\n\n\nconst LoginPage:React.FunctionComponent<IPageProps>=props=>{\n\n    const [authenticating, setAuthenticating] = useState<boolean>(false);\n    const [error, setError] = useState<string>('');\n\n    const userContext = useContext(UserContext)\n    const history = useHistory();\n    const isLogin = window.location.pathname.includes('login');\n\n\n    const signInWithSocialMedia = (provider: firebase.auth.AuthProvider) => {\n        if (error !== '') setError('');\n        setAuthenticating(true);\n        SocialMediaPopup(provider)\n        .then(async (result) => {\n            logging.info(result);\n            \n            let user = result.user;\n            if (user)\n            {\n                let uid = user.uid;\n                let name = user.displayName;\n            \n\n            if (name)\n            {\n                try \n                {\n                    let fire_token = await user.getIdToken();\n\n                    /**if we get a token, auth with the backup */\n\n                    Authenticate(uid, name, fire_token, (error, _user) => {\n                        if (error)\n                        {\n                            setError(error);\n                            setAuthenticating(false);\n                        }\n                        else if (_user)\n                        {\n                            userContext.userDispatch({ type: 'login', payload: { user: _user, fire_token } })\n                            history.push('/');\n                        }\n                    });\n                } \n                catch (error) \n                {\n                    setError('Invalid token.');\n                    logging.error(error);\n                    setAuthenticating(false);\n                }\n            }\n            else\n                {\n                    /** \n                     * We can set these manually with a new form \n                     * For example, the Twitter provider sometimes\n                     * does not provide a username as some users sign\n                     * up with a phone number.  Here you could ask\n                     * them to provide a name that would be displayed\n                     * on this website.\n                     * */\n                    setError('The identify provider is missing a display name.')\n                    setAuthenticating(false);\n                }\n        } else\n        {\n            setError('The social media provider does not have enough information. Please try a different provider.')\n            setAuthenticating(false);\n        }\n        })\n        .catch(error => {\n            logging.error(error);\n            setAuthenticating(false);\n            setError(error.message);\n        });\n    }\n    return(\n        <Container fluid className=\"p-0\">\n        <Naviagtion/>\n        <CenterPiece>\n            <Card>\n                <CardHeader>\n                    {isLogin ? 'Login' : 'Sign Up'}\n                </CardHeader>\n                <CardBody>\n                    <ErrorText error={error} />\n                    <Button\n                        block\n                        disabled={authenticating}\n                        onClick={() => signInWithSocialMedia(Providers.google)}\n                        style={{ backgroundColor:'#222454', borderColor: '#222454'}} \n                    >\n                        <i className=\"fab fa-google mr-2\"></i> Sign {isLogin ? 'in' : 'up'} with Google\n                    </Button>\n                    {authenticating && <LoadingComponent card={false} />} \n                </CardBody>\n            </Card>\n        </CenterPiece>\n        </Container>\n    )\n}\n\nexport default LoginPage;\n\n\n// import axios from 'axios';\n// import React, { SyntheticEvent, useState } from 'react'\n// import { Redirect } from 'react-router-dom';\n\n// const Login=()=> {\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [redirect, setRedirect] = useState(false)\n//   const [errors, setError]=useState(\"\")\n\n//   const handleLogin = async (e: SyntheticEvent) => {\n\n//     e.preventDefault();\n//     axios({\n//       url: \"/login\",\n//       method: \"POST\",\n//       data: JSON.stringify({\n//         email,\n//         password,\n//       }),\n//     })\n//       .then(async (res) => {\n//         console.log(res);\n        \n//         const content = await res;\n//         const readData=content.data\n//         if (readData.status===200){\n//             setRedirect(true)\n//         }\n//         if(readData.status===401 && readData.message===\"Unauthorized\"){\n//           const response=`Please provide a valid email and password!`\n//           setError(response)\n//         }\n//       })\n//       .catch((err) => {\n//         setError(err.data.message)\n//         console.log(err.data);\n//       });\n      \n//   };\n\n//   if(redirect){\n//     return  <Redirect to =\"/\"/>;\n//   }\n \n//     return (\n//       <div>\n//       <div className=\"err\">\n//         {errors}\n//       </div>\n//         <form onSubmit={handleLogin}>\n//         <h1 className=\"h3 mb-3 fw-normal\">Login</h1>\n\n//         <input\n//           type=\"email\"\n//           className=\"form-control\"\n//           placeholder=\"Email address\"\n//           required\n//           onChange={(e) => setEmail(e.target.value)}\n//         />\n\n//         <input\n//           type=\"password\"\n//           className=\"form-control\"\n//           required\n//           placeholder=\"Password\"\n//           onChange={(e) => setPassword(e.target.value)}\n//         />\n\n//         <button\n//           className=\"w-100 btn btn-lg btn-primary custom-btn\"\n//           type=\"submit\"\n//         >\n//           Login\n//         </button>\n//       </form>\n//       </div>\n//     )\n// }\n\n// export default  Login;\n"]},"metadata":{},"sourceType":"module"}