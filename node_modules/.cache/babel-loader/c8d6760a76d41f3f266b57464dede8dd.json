{"ast":null,"code":"import axios from 'axios';\nimport config from '../config/config';\nimport { auth } from '../config/firebase';\nimport logging from '../config/logging';\nexport const SignInWithSocialMedia = provider => new Promise((resolve, reject) => {\n  auth.signInWithPopup(provider).then(result => resolve(result)).catch(error => reject(error));\n});\n_c = SignInWithSocialMedia;\nexport const Authenticate = async (uid, name, email, fire_token, callback) => {\n  try {\n    let response = await axios({\n      method: 'POST',\n      url: `${config.server.url}/users/login`,\n      data: {\n        uid,\n        name,\n        email\n      },\n      headers: {\n        Authorization: `Bearer ${fire_token}`\n      }\n    });\n\n    if (response.status === 200 || response.status === 201 || response.status === 304) {\n      logging.info('Successfully authenticated.');\n      callback(null, response.data.user);\n    } else {\n      logging.warn('Unable to authenticate.');\n      callback('Unable to authenticate.', null);\n    }\n  } catch (error) {\n    logging.error(error);\n    callback('Unable to authenticate.', null);\n  }\n};\n_c2 = Authenticate;\nexport const Validate = async (fire_token, callback) => {\n  try {\n    let response = await axios({\n      method: 'GET',\n      url: `${config.server.url}/users/validate`,\n      headers: {\n        Authorization: `Bearer ${fire_token}`\n      }\n    });\n\n    if (response.status === 200 || response.status === 304) {\n      logging.info('Successfully validated.');\n      callback(null, response.data.user);\n    } else {\n      logging.warn(response);\n      callback('Unable to validate.', null);\n    }\n  } catch (error) {\n    logging.error(error);\n    callback('Unable to validate.', null);\n  }\n};\n_c3 = Validate;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SignInWithSocialMedia\");\n$RefreshReg$(_c2, \"Authenticate\");\n$RefreshReg$(_c3, \"Validate\");","map":{"version":3,"sources":["/Users/macbook/quiz_run/quizrun/src/modules/auth.ts"],"names":["axios","config","auth","logging","SignInWithSocialMedia","provider","Promise","resolve","reject","signInWithPopup","then","result","catch","error","Authenticate","uid","name","email","fire_token","callback","response","method","url","server","data","headers","Authorization","status","info","user","warn","Validate"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAGA,OAAO,MAAMC,qBAAqB,GAAIC,QAAD,IACjC,IAAIC,OAAJ,CAA0C,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC3DN,EAAAA,IAAI,CAACO,eAAL,CAAqBJ,QAArB,EACKK,IADL,CACWC,MAAD,IAAYJ,OAAO,CAACI,MAAD,CAD7B,EAEKC,KAFL,CAEYC,KAAD,IAAWL,MAAM,CAACK,KAAD,CAF5B;AAGH,CAJD,CADG;KAAMT,qB;AAOT,OAAO,MAAMU,YAAY,GAAG,OAAOC,GAAP,EAAoBC,IAApB,EAAkCC,KAAlC,EAAsDC,UAAtD,EAA0EC,QAA1E,KAA2I;AACnK,MAAI;AACA,QAAIC,QAAQ,GAAG,MAAMpB,KAAK,CAAC;AACvBqB,MAAAA,MAAM,EAAE,MADe;AAEvBC,MAAAA,GAAG,EAAG,GAAErB,MAAM,CAACsB,MAAP,CAAcD,GAAI,cAFH;AAGvBE,MAAAA,IAAI,EAAE;AACFT,QAAAA,GADE;AAEFC,QAAAA,IAFE;AAGFC,QAAAA;AAHE,OAHiB;AAQvBQ,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASR,UAAW;AAAtC;AARc,KAAD,CAA1B;;AAWA,QAAIE,QAAQ,CAACO,MAAT,KAAoB,GAApB,IAA2BP,QAAQ,CAACO,MAAT,KAAoB,GAA/C,IAAsDP,QAAQ,CAACO,MAAT,KAAoB,GAA9E,EAAmF;AAC/ExB,MAAAA,OAAO,CAACyB,IAAR,CAAa,6BAAb;AACAT,MAAAA,QAAQ,CAAC,IAAD,EAAOC,QAAQ,CAACI,IAAT,CAAcK,IAArB,CAAR;AACH,KAHD,MAGO;AACH1B,MAAAA,OAAO,CAAC2B,IAAR,CAAa,yBAAb;AACAX,MAAAA,QAAQ,CAAC,yBAAD,EAA4B,IAA5B,CAAR;AACH;AACJ,GAnBD,CAmBE,OAAON,KAAP,EAAc;AACZV,IAAAA,OAAO,CAACU,KAAR,CAAcA,KAAd;AACAM,IAAAA,QAAQ,CAAC,yBAAD,EAA4B,IAA5B,CAAR;AACH;AACJ,CAxBM;MAAML,Y;AA0Bb,OAAO,MAAMiB,QAAQ,GAAG,OAAOb,UAAP,EAA2BC,QAA3B,KAA4F;AAChH,MAAI;AACA,QAAIC,QAAQ,GAAG,MAAMpB,KAAK,CAAC;AACvBqB,MAAAA,MAAM,EAAE,KADe;AAEvBC,MAAAA,GAAG,EAAG,GAAErB,MAAM,CAACsB,MAAP,CAAcD,GAAI,iBAFH;AAGvBG,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASR,UAAW;AAAtC;AAHc,KAAD,CAA1B;;AAMA,QAAIE,QAAQ,CAACO,MAAT,KAAoB,GAApB,IAA2BP,QAAQ,CAACO,MAAT,KAAoB,GAAnD,EAAwD;AACpDxB,MAAAA,OAAO,CAACyB,IAAR,CAAa,yBAAb;AACAT,MAAAA,QAAQ,CAAC,IAAD,EAAOC,QAAQ,CAACI,IAAT,CAAcK,IAArB,CAAR;AACH,KAHD,MAGO;AACH1B,MAAAA,OAAO,CAAC2B,IAAR,CAAaV,QAAb;AACAD,MAAAA,QAAQ,CAAC,qBAAD,EAAwB,IAAxB,CAAR;AACH;AACJ,GAdD,CAcE,OAAON,KAAP,EAAc;AACZV,IAAAA,OAAO,CAACU,KAAR,CAAcA,KAAd;AACAM,IAAAA,QAAQ,CAAC,qBAAD,EAAwB,IAAxB,CAAR;AACH;AACJ,CAnBM;MAAMY,Q","sourcesContent":["import axios from 'axios';\nimport firebase from 'firebase';\nimport config from '../config/config';\nimport { auth } from '../config/firebase';\nimport logging from '../config/logging';\nimport IUser from '../interfaces/user';\n\nexport const SignInWithSocialMedia = (provider: firebase.auth.AuthProvider) =>\n    new Promise<firebase.auth.UserCredential>((resolve, reject) => {\n        auth.signInWithPopup(provider)\n            .then((result) => resolve(result))\n            .catch((error) => reject(error));\n    });\n\n    export const Authenticate = async (uid: string, name: string, email: string|null, fire_token: string, callback: (error: string | null, user: IUser | null) => void) => {\n        try {\n            let response = await axios({\n                method: 'POST',\n                url: `${config.server.url}/users/login`,\n                data: {\n                    uid,\n                    name,\n                    email\n                },\n                headers: { Authorization: `Bearer ${fire_token}` }\n            });\n    \n            if (response.status === 200 || response.status === 201 || response.status === 304) {\n                logging.info('Successfully authenticated.');\n                callback(null, response.data.user);\n            } else {\n                logging.warn('Unable to authenticate.');\n                callback('Unable to authenticate.', null);\n            }\n        } catch (error) {\n            logging.error(error);\n            callback('Unable to authenticate.', null);\n        }\n    };\n\n    export const Validate = async (fire_token: string, callback: (error: string | null, user: IUser | null) => void) => {\n        try {\n            let response = await axios({\n                method: 'GET',\n                url: `${config.server.url}/users/validate`,\n                headers: { Authorization: `Bearer ${fire_token}` }\n            });\n    \n            if (response.status === 200 || response.status === 304) {\n                logging.info('Successfully validated.');\n                callback(null, response.data.user);\n            } else {\n                logging.warn(response);\n                callback('Unable to validate.', null);\n            }\n        } catch (error) {\n            logging.error(error);\n            callback('Unable to validate.', null);\n        }\n    };\n    "]},"metadata":{},"sourceType":"module"}