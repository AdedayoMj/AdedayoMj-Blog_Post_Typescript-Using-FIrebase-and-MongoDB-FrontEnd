{"ast":null,"code":"const DEFAULT_NAMESPACE = 'Client';\n\nconst info = (message, namespace) => {\n  if (typeof message === 'string') {\n    console.log(`[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [INFO] ${message}`);\n  } else {\n    console.log(`[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [INFO]`, message);\n  }\n};\n\nconst warn = (message, namespace) => {\n  if (typeof message === 'string') {\n    console.log(`[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [WARN] ${message}`);\n  } else {\n    console.log(`[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [WARN]`, message);\n  }\n};\n\nconst error = (message, namespace) => {\n  if (typeof message === 'string') {\n    console.log(`[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [ERROR] ${message}`);\n  } else {\n    console.log(`[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [ERROR]`, message);\n  }\n};\n\nconst getDate = () => {\n  return new Date().toISOString();\n};\n\nconst logging = {\n  info,\n  warn,\n  error\n};\nexport default logging;","map":{"version":3,"sources":["/Users/macbook/quiz_run/quizrun/src/config/logging.ts"],"names":["DEFAULT_NAMESPACE","info","message","namespace","console","log","getDate","warn","error","Date","toISOString","logging"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,QAA1B;;AAEA,MAAMC,IAAI,GAAG,CAACC,OAAD,EAAeC,SAAf,KAAsC;AAC/C,MAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;AAC7BE,IAAAA,OAAO,CAACC,GAAR,CAAa,IAAGC,OAAO,EAAG,MAAKH,SAAS,IAAIH,iBAAkB,YAAWE,OAAQ,EAAjF;AACH,GAFD,MAEO;AACHE,IAAAA,OAAO,CAACC,GAAR,CAAa,IAAGC,OAAO,EAAG,MAAKH,SAAS,IAAIH,iBAAkB,UAA9D,EAAyEE,OAAzE;AACH;AACJ,CAND;;AAQA,MAAMK,IAAI,GAAG,CAACL,OAAD,EAAeC,SAAf,KAAsC;AAC/C,MAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;AAC7BE,IAAAA,OAAO,CAACC,GAAR,CAAa,IAAGC,OAAO,EAAG,MAAKH,SAAS,IAAIH,iBAAkB,YAAWE,OAAQ,EAAjF;AACH,GAFD,MAEO;AACHE,IAAAA,OAAO,CAACC,GAAR,CAAa,IAAGC,OAAO,EAAG,MAAKH,SAAS,IAAIH,iBAAkB,UAA9D,EAAyEE,OAAzE;AACH;AACJ,CAND;;AAQA,MAAMM,KAAK,GAAG,CAACN,OAAD,EAAeC,SAAf,KAAsC;AAChD,MAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;AAC7BE,IAAAA,OAAO,CAACC,GAAR,CAAa,IAAGC,OAAO,EAAG,MAAKH,SAAS,IAAIH,iBAAkB,aAAYE,OAAQ,EAAlF;AACH,GAFD,MAEO;AACHE,IAAAA,OAAO,CAACC,GAAR,CAAa,IAAGC,OAAO,EAAG,MAAKH,SAAS,IAAIH,iBAAkB,WAA9D,EAA0EE,OAA1E;AACH;AACJ,CAND;;AAQA,MAAMI,OAAO,GAAG,MAAM;AAClB,SAAO,IAAIG,IAAJ,GAAWC,WAAX,EAAP;AACH,CAFD;;AAIA,MAAMC,OAAO,GAAG;AAAEV,EAAAA,IAAF;AAAQM,EAAAA,IAAR;AAAcC,EAAAA;AAAd,CAAhB;AAEA,eAAeG,OAAf","sourcesContent":["const DEFAULT_NAMESPACE = 'Client';\n\nconst info = (message: any, namespace?: string) => {\n    if (typeof message === 'string') {\n        console.log(`[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [INFO] ${message}`);\n    } else {\n        console.log(`[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [INFO]`, message);\n    }\n};\n\nconst warn = (message: any, namespace?: string) => {\n    if (typeof message === 'string') {\n        console.log(`[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [WARN] ${message}`);\n    } else {\n        console.log(`[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [WARN]`, message);\n    }\n};\n\nconst error = (message: any, namespace?: string) => {\n    if (typeof message === 'string') {\n        console.log(`[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [ERROR] ${message}`);\n    } else {\n        console.log(`[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [ERROR]`, message);\n    }\n};\n\nconst getDate = () => {\n    return new Date().toISOString();\n};\n\nconst logging = { info, warn, error };\n\nexport default logging;"]},"metadata":{},"sourceType":"module"}