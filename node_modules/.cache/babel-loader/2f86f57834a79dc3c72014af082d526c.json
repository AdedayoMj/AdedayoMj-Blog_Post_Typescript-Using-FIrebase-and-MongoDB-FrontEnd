{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/quiz_run/quizrun/src/pages/login.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport UserContext from '../context/user';\nimport { Authenticate, SignInWithSocialMedia as SocialMediaPopup } from '../modules/auth';\nimport logging from '../config/logging';\nimport CenterPiece from '../components/centerpiece';\nimport { Button, Container, FormGroup, Input } from 'reactstrap';\nimport ErrorText from '../components/error_text';\nimport LoadingComponent from '../components/loading_components';\nimport { auth, Providers } from '../config/firebase'; // import Naviagtion from '../components/navigation';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginPage = props => {\n  _s();\n\n  const [authenticating, setAuthenticating] = useState(false);\n  const [error, setError] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const userContext = useContext(UserContext);\n  const history = useHistory();\n  const isLogin = window.location.pathname.includes('login');\n\n  const signInWithEmailAndPassword = () => {\n    if (error !== '') setError('');\n    setAuthenticating(true);\n    auth.signInWithEmailAndPassword(email, password).then(async result => {\n      logging.info(result);\n      let user = result.user;\n\n      if (user) {\n        let uid = user.uid;\n        let name = user.displayName;\n        let email = user.email;\n\n        if (name) {\n          try {\n            let fire_token = await user.getIdToken();\n            /**if we get a token, auth with the backup */\n\n            Authenticate(uid, name, email, fire_token, (error, _user) => {\n              if (error) {\n                setError(error);\n                setAuthenticating(false);\n              } else if (_user) {\n                userContext.userDispatch({\n                  type: 'login',\n                  payload: {\n                    user: _user,\n                    fire_token\n                  }\n                });\n                history.push('/');\n              }\n            });\n          } catch (error) {\n            setError('Invalid token.');\n            logging.error(error);\n            setAuthenticating(false);\n          }\n        }\n      } else {\n        setError('Oops!!! Something went wrong please try again');\n        setAuthenticating(false);\n      }\n    }).catch(error => {\n      logging.error(error);\n      setAuthenticating(false);\n      setError(error.message);\n    });\n  };\n\n  const signInWithSocialMedia = provider => {\n    if (error !== '') setError('');\n    setAuthenticating(true);\n    SocialMediaPopup(provider).then(async result => {\n      logging.info(result);\n      let user = result.user;\n\n      if (user) {\n        let uid = user.uid;\n        let name = user.displayName;\n        let email = user.email;\n\n        if (name) {\n          try {\n            let fire_token = await user.getIdToken();\n            /**if we get a token, auth with the backup */\n\n            Authenticate(uid, name, email, fire_token, (error, _user) => {\n              if (error) {\n                setError(error);\n                setAuthenticating(false);\n              } else if (_user) {\n                userContext.userDispatch({\n                  type: 'login',\n                  payload: {\n                    user: _user,\n                    fire_token\n                  }\n                });\n                history.push('/');\n              }\n            });\n          } catch (error) {\n            setError('Invalid token.');\n            logging.error(error);\n            setAuthenticating(false);\n          }\n        } else {\n          /**\n           * We can set these manually with a new form\n           * For example, the Twitter provider sometimes\n           * does not provide a username as some users sign\n           * up with a phone number.  Here you could ask\n           * them to provide a name that would be displayed\n           * on this website.\n           * */\n          setError('The identify provider is missing a display name.');\n          setAuthenticating(false);\n        }\n      } else {\n        setError('The social media provider does not have enough information. Please try a different provider.');\n        setAuthenticating(false);\n      }\n    }).catch(error => {\n      logging.error(error);\n      setAuthenticating(false);\n      setError(error.message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    className: \"p-0\",\n    children: /*#__PURE__*/_jsxDEV(CenterPiece, {\n      header: \"Login\",\n      children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          type: \"email\",\n          name: \"email\",\n          id: \"email\",\n          placeholder: \"Email Address\",\n          onChange: event => setEmail(event.target.value),\n          value: email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          autoComplete: \"new-password\",\n          type: \"password\",\n          name: \"password\",\n          id: \"password\",\n          placeholder: \"Enter Password\",\n          onChange: event => setPassword(event.target.value),\n          value: password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: authenticating,\n        color: \"success\",\n        block: true,\n        onClick: () => signInWithEmailAndPassword(),\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"m-1 text-center\",\n          children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/register\",\n            children: \"Register here.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 71\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"m-1 text-center\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/forget\",\n            children: \"Forget your password?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 48\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ErrorText, {\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"bg-info m-3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        block: true,\n        disabled: authenticating,\n        onClick: () => signInWithSocialMedia(Providers.google),\n        style: {\n          backgroundColor: '#222454',\n          borderColor: '#222454'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fab fa-google mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 29\n        }, this), \" Sign \", isLogin ? 'in' : 'up', \" with Google\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 25\n      }, this), authenticating && /*#__PURE__*/_jsxDEV(LoadingComponent, {\n        card: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 44\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LoginPage, \"K15iiPUW9WcdZbs1qXWcAIWHYBU=\", false, function () {\n  return [useHistory];\n});\n\n_c = LoginPage;\nexport default LoginPage; // import axios from 'axios';\n// import React, { SyntheticEvent, useState } from 'react'\n// import { Redirect } from 'react-router-dom';\n// const Login=()=> {\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [redirect, setRedirect] = useState(false)\n//   const [errors, setError]=useState(\"\")\n//   const handleLogin = async (e: SyntheticEvent) => {\n//     e.preventDefault();\n//     axios({\n//       url: \"/login\",\n//       method: \"POST\",\n//       data: JSON.stringify({\n//         email,\n//         password,\n//       }),\n//     })\n//       .then(async (res) => {\n//         console.log(res);\n//         const content = await res;\n//         const readData=content.data\n//         if (readData.status===200){\n//             setRedirect(true)\n//         }\n//         if(readData.status===401 && readData.message===\"Unauthorized\"){\n//           const response=`Please provide a valid email and password!`\n//           setError(response)\n//         }\n//       })\n//       .catch((err) => {\n//         setError(err.data.message)\n//         console.log(err.data);\n//       });\n//   };\n//   if(redirect){\n//     return  <Redirect to =\"/\"/>;\n//   }\n//     return (\n//       <div>\n//       <div className=\"err\">\n//         {errors}\n//       </div>\n//         <form onSubmit={handleLogin}>\n//         <h1 className=\"h3 mb-3 fw-normal\">Login</h1>\n//         <input\n//           type=\"email\"\n//           className=\"form-control\"\n//           placeholder=\"Email address\"\n//           required\n//           onChange={(e) => setEmail(e.target.value)}\n//         />\n//         <input\n//           type=\"password\"\n//           className=\"form-control\"\n//           required\n//           placeholder=\"Password\"\n//           onChange={(e) => setPassword(e.target.value)}\n//         />\n//         <button\n//           className=\"w-100 btn btn-lg btn-primary custom-btn\"\n//           type=\"submit\"\n//         >\n//           Login\n//         </button>\n//       </form>\n//       </div>\n//     )\n// }\n// export default  Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["/Users/macbook/quiz_run/quizrun/src/pages/login.tsx"],"names":["React","useContext","useState","Link","useHistory","UserContext","Authenticate","SignInWithSocialMedia","SocialMediaPopup","logging","CenterPiece","Button","Container","FormGroup","Input","ErrorText","LoadingComponent","auth","Providers","LoginPage","props","authenticating","setAuthenticating","error","setError","email","setEmail","password","setPassword","userContext","history","isLogin","window","location","pathname","includes","signInWithEmailAndPassword","then","result","info","user","uid","name","displayName","fire_token","getIdToken","_user","userDispatch","type","payload","push","catch","message","signInWithSocialMedia","provider","event","target","value","google","backgroundColor","borderColor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AAGA,SAASC,YAAT,EAAuBC,qBAAqB,IAAIC,gBAAhD,QAAwE,iBAAxE;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,SAA5B,EAAuCC,KAAvC,QAAoD,YAApD;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,oBAAhC,C,CACA;;;;AAEA,MAAMC,SAA8C,GAAIC,KAAD,IAAW;AAAA;;AAC9D,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCpB,QAAQ,CAAU,KAAV,CAApD;AACA,QAAM,CAACqB,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAS,EAAT,CAAlC;AACA,QAAM,CAACuB,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,CAAS,EAAT,CAAlC;AACA,QAAM,CAACyB,QAAD,EAAWC,WAAX,IAA0B1B,QAAQ,CAAS,EAAT,CAAxC;AAEA,QAAM2B,WAAW,GAAG5B,UAAU,CAACI,WAAD,CAA9B;AACA,QAAMyB,OAAO,GAAG1B,UAAU,EAA1B;AACA,QAAM2B,OAAO,GAAGC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,QAAzB,CAAkC,OAAlC,CAAhB;;AAEA,QAAMC,0BAA0B,GAAG,MAAM;AACrC,QAAIb,KAAK,KAAK,EAAd,EAAkBC,QAAQ,CAAC,EAAD,CAAR;AAElBF,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AAEAL,IAAAA,IAAI,CAACmB,0BAAL,CAAgCX,KAAhC,EAAuCE,QAAvC,EACCU,IADD,CACM,MAAMC,MAAN,IAAiB;AACnB7B,MAAAA,OAAO,CAAC8B,IAAR,CAAaD,MAAb;AACC,UAAIE,IAAI,GAAGF,MAAM,CAACE,IAAlB;;AACG,UAAIA,IAAJ,EAAU;AACN,YAAIC,GAAG,GAAGD,IAAI,CAACC,GAAf;AACA,YAAIC,IAAI,GAAGF,IAAI,CAACG,WAAhB;AACA,YAAIlB,KAAK,GAAGe,IAAI,CAACf,KAAjB;;AACA,YAAGiB,IAAH,EAAQ;AAIJ,cAAI;AACA,gBAAIE,UAAU,GAAG,MAAMJ,IAAI,CAACK,UAAL,EAAvB;AAEA;;AAEAvC,YAAAA,YAAY,CAACmC,GAAD,EAAMC,IAAN,EAAYjB,KAAZ,EAAmBmB,UAAnB,EAA+B,CAACrB,KAAD,EAAQuB,KAAR,KAAkB;AACzD,kBAAIvB,KAAJ,EAAW;AACPC,gBAAAA,QAAQ,CAACD,KAAD,CAAR;AACAD,gBAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH,eAHD,MAGO,IAAIwB,KAAJ,EAAW;AACdjB,gBAAAA,WAAW,CAACkB,YAAZ,CAAyB;AAAEC,kBAAAA,IAAI,EAAE,OAAR;AAAiBC,kBAAAA,OAAO,EAAE;AAAET,oBAAAA,IAAI,EAAEM,KAAR;AAAeF,oBAAAA;AAAf;AAA1B,iBAAzB;AACAd,gBAAAA,OAAO,CAACoB,IAAR,CAAa,GAAb;AACH;AACJ,aARW,CAAZ;AASH,WAdD,CAcE,OAAO3B,KAAP,EAAc;AACZC,YAAAA,QAAQ,CAAC,gBAAD,CAAR;AACAf,YAAAA,OAAO,CAACc,KAAR,CAAcA,KAAd;AACAD,YAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH;AACJ;AAEJ,OA7BD,MA6BO;AACHE,QAAAA,QAAQ,CAAC,+CAAD,CAAR;AACAF,QAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH;AACR,KArCD,EAsCC6B,KAtCD,CAsCO5B,KAAK,IAAI;AACZd,MAAAA,OAAO,CAACc,KAAR,CAAcA,KAAd;AACAD,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAE,MAAAA,QAAQ,CAACD,KAAK,CAAC6B,OAAP,CAAR;AACH,KA1CD;AA2CH,GAhDD;;AAkDA,QAAMC,qBAAqB,GAAIC,QAAD,IAA0C;AACpE,QAAI/B,KAAK,KAAK,EAAd,EAAkBC,QAAQ,CAAC,EAAD,CAAR;AAClBF,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAd,IAAAA,gBAAgB,CAAC8C,QAAD,CAAhB,CACKjB,IADL,CACU,MAAOC,MAAP,IAAkB;AACpB7B,MAAAA,OAAO,CAAC8B,IAAR,CAAaD,MAAb;AAEA,UAAIE,IAAI,GAAGF,MAAM,CAACE,IAAlB;;AACA,UAAIA,IAAJ,EAAU;AACN,YAAIC,GAAG,GAAGD,IAAI,CAACC,GAAf;AACA,YAAIC,IAAI,GAAGF,IAAI,CAACG,WAAhB;AACA,YAAIlB,KAAK,GAAGe,IAAI,CAACf,KAAjB;;AAEA,YAAIiB,IAAJ,EAAU;AACN,cAAI;AACA,gBAAIE,UAAU,GAAG,MAAMJ,IAAI,CAACK,UAAL,EAAvB;AAEA;;AAEAvC,YAAAA,YAAY,CAACmC,GAAD,EAAMC,IAAN,EAAYjB,KAAZ,EAAmBmB,UAAnB,EAA+B,CAACrB,KAAD,EAAQuB,KAAR,KAAkB;AACzD,kBAAIvB,KAAJ,EAAW;AACPC,gBAAAA,QAAQ,CAACD,KAAD,CAAR;AACAD,gBAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH,eAHD,MAGO,IAAIwB,KAAJ,EAAW;AACdjB,gBAAAA,WAAW,CAACkB,YAAZ,CAAyB;AAAEC,kBAAAA,IAAI,EAAE,OAAR;AAAiBC,kBAAAA,OAAO,EAAE;AAAET,oBAAAA,IAAI,EAAEM,KAAR;AAAeF,oBAAAA;AAAf;AAA1B,iBAAzB;AACAd,gBAAAA,OAAO,CAACoB,IAAR,CAAa,GAAb;AACH;AACJ,aARW,CAAZ;AASH,WAdD,CAcE,OAAO3B,KAAP,EAAc;AACZC,YAAAA,QAAQ,CAAC,gBAAD,CAAR;AACAf,YAAAA,OAAO,CAACc,KAAR,CAAcA,KAAd;AACAD,YAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH;AACJ,SApBD,MAoBO;AACH;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACwBE,UAAAA,QAAQ,CAAC,kDAAD,CAAR;AACAF,UAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH;AACJ,OArCD,MAqCO;AACHE,QAAAA,QAAQ,CAAC,8FAAD,CAAR;AACAF,QAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH;AACJ,KA9CL,EA+CK6B,KA/CL,CA+CY5B,KAAD,IAAW;AACdd,MAAAA,OAAO,CAACc,KAAR,CAAcA,KAAd;AACAD,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAE,MAAAA,QAAQ,CAACD,KAAK,CAAC6B,OAAP,CAAR;AACH,KAnDL;AAoDH,GAvDD;;AAwDA,sBACI,QAAC,SAAD;AAAW,IAAA,KAAK,MAAhB;AAAiB,IAAA,SAAS,EAAC,KAA3B;AAAA,2BAEI,QAAC,WAAD;AAAa,MAAA,MAAM,EAAC,OAApB;AAAA,8BAEA,QAAC,SAAD;AAAA,+BACI,QAAC,KAAD;AACI,UAAA,IAAI,EAAC,OADT;AAEI,UAAA,IAAI,EAAC,OAFT;AAGI,UAAA,EAAE,EAAC,OAHP;AAII,UAAA,WAAW,EAAC,eAJhB;AAKI,UAAA,QAAQ,EAAEG,KAAK,IAAI7B,QAAQ,CAAC6B,KAAK,CAACC,MAAN,CAAaC,KAAd,CAL/B;AAMI,UAAA,KAAK,EAAEhC;AANX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFA,eAYA,QAAC,SAAD;AAAA,+BACI,QAAC,KAAD;AACI,UAAA,YAAY,EAAC,cADjB;AAEI,UAAA,IAAI,EAAC,UAFT;AAGI,UAAA,IAAI,EAAC,UAHT;AAII,UAAA,EAAE,EAAC,UAJP;AAKI,UAAA,WAAW,EAAC,gBALhB;AAMI,UAAA,QAAQ,EAAE8B,KAAK,IAAI3B,WAAW,CAAC2B,KAAK,CAACC,MAAN,CAAaC,KAAd,CANlC;AAOI,UAAA,KAAK,EAAE9B;AAPX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAZA,eAuBA,QAAC,MAAD;AACI,QAAA,QAAQ,EAAEN,cADd;AAEI,QAAA,KAAK,EAAC,SAFV;AAGI,QAAA,KAAK,MAHT;AAII,QAAA,OAAO,EAAE,MAAMe,0BAA0B,EAJ7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBA,eA+BA;AAAA,gCACI;AAAG,UAAA,SAAS,EAAC,iBAAb;AAAA,6DAAsD,QAAC,IAAD;AAAM,YAAA,EAAE,EAAC,WAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAtD;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAG,UAAA,SAAS,EAAC,iBAAb;AAAA,iCAA+B,QAAC,IAAD;AAAM,YAAA,EAAE,EAAC,SAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cA/BA,eAmCA,QAAC,SAAD;AAAW,QAAA,KAAK,EAAEb;AAAlB;AAAA;AAAA;AAAA;AAAA,cAnCA,eAoCA;AAAI,QAAA,SAAS,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,cApCA,eAqCY,QAAC,MAAD;AAAQ,QAAA,KAAK,MAAb;AAAc,QAAA,QAAQ,EAAEF,cAAxB;AAAwC,QAAA,OAAO,EAAE,MAAMgC,qBAAqB,CAACnC,SAAS,CAACwC,MAAX,CAA5E;AAAgG,QAAA,KAAK,EAAE;AAAEC,UAAAA,eAAe,EAAE,SAAnB;AAA8BC,UAAAA,WAAW,EAAE;AAA3C,SAAvG;AAAA,gCACI;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADJ,YACiD7B,OAAO,GAAG,IAAH,GAAU,IADlE;AAAA;AAAA;AAAA;AAAA;AAAA,cArCZ,EAyCaV,cAAc,iBAAI,QAAC,gBAAD;AAAkB,QAAA,IAAI,EAAE;AAAxB;AAAA;AAAA;AAAA;AAAA,cAzC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAoDH,CAxKD;;GAAMF,S;UAOcf,U;;;KAPde,S;AA0KN,eAAeA,SAAf,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport UserContext from '../context/user';\nimport firebase from 'firebase';\nimport IPageProps from '../interfaces/pages';\nimport { Authenticate, SignInWithSocialMedia as SocialMediaPopup } from '../modules/auth';\nimport logging from '../config/logging';\nimport CenterPiece from '../components/centerpiece';\nimport { Button, Container, FormGroup, Input } from 'reactstrap';\nimport ErrorText from '../components/error_text';\nimport LoadingComponent from '../components/loading_components';\nimport { auth, Providers } from '../config/firebase';\n// import Naviagtion from '../components/navigation';\n\nconst LoginPage: React.FunctionComponent<IPageProps> = (props) => {\n    const [authenticating, setAuthenticating] = useState<boolean>(false);\n    const [error, setError] = useState<string>('');\n    const [email, setEmail] = useState<string>('');\n    const [password, setPassword] = useState<string>('');\n\n    const userContext = useContext(UserContext);\n    const history = useHistory();\n    const isLogin = window.location.pathname.includes('login');\n\n    const signInWithEmailAndPassword = () => {\n        if (error !== '') setError('');\n\n        setAuthenticating(true);\n\n        auth.signInWithEmailAndPassword(email, password)\n        .then(async(result) => {\n            logging.info(result);\n             let user = result.user;\n                if (user) {\n                    let uid = user.uid;\n                    let name = user.displayName;\n                    let email = user.email\n                    if(name){\n\n                    \n        \n                        try {\n                            let fire_token = await user.getIdToken();\n\n                            /**if we get a token, auth with the backup */\n\n                            Authenticate(uid, name, email, fire_token, (error, _user) => {\n                                if (error) {\n                                    setError(error);\n                                    setAuthenticating(false);\n                                } else if (_user) {\n                                    userContext.userDispatch({ type: 'login', payload: { user: _user, fire_token } });\n                                    history.push('/');\n                                }\n                            });\n                        } catch (error) {\n                            setError('Invalid token.');\n                            logging.error(error);\n                            setAuthenticating(false);\n                        }\n                    }\n                  \n                } else {\n                    setError('Oops!!! Something went wrong please try again');\n                    setAuthenticating(false);\n                }\n        })\n        .catch(error => {\n            logging.error(error);\n            setAuthenticating(false);\n            setError(error.message);\n        });\n    }\n\n    const signInWithSocialMedia = (provider: firebase.auth.AuthProvider) => {\n        if (error !== '') setError('');\n        setAuthenticating(true);\n        SocialMediaPopup(provider)\n            .then(async (result) => {\n                logging.info(result);\n\n                let user = result.user;\n                if (user) {\n                    let uid = user.uid;\n                    let name = user.displayName;\n                    let email = user.email\n                \n                    if (name) {\n                        try {\n                            let fire_token = await user.getIdToken();\n\n                            /**if we get a token, auth with the backup */\n\n                            Authenticate(uid, name, email, fire_token, (error, _user) => {\n                                if (error) {\n                                    setError(error);\n                                    setAuthenticating(false);\n                                } else if (_user) {\n                                    userContext.userDispatch({ type: 'login', payload: { user: _user, fire_token } });\n                                    history.push('/');\n                                }\n                            });\n                        } catch (error) {\n                            setError('Invalid token.');\n                            logging.error(error);\n                            setAuthenticating(false);\n                        }\n                    } else {\n                        /**\n                         * We can set these manually with a new form\n                         * For example, the Twitter provider sometimes\n                         * does not provide a username as some users sign\n                         * up with a phone number.  Here you could ask\n                         * them to provide a name that would be displayed\n                         * on this website.\n                         * */\n                        setError('The identify provider is missing a display name.');\n                        setAuthenticating(false);\n                    }\n                } else {\n                    setError('The social media provider does not have enough information. Please try a different provider.');\n                    setAuthenticating(false);\n                }\n            })\n            .catch((error) => {\n                logging.error(error);\n                setAuthenticating(false);\n                setError(error.message);\n            });\n    };\n    return (\n        <Container fluid className=\"p-0\">\n            {/* <Naviagtion /> */}\n            <CenterPiece header='Login'>\n            \n            <FormGroup>\n                <Input \n                    type=\"email\"\n                    name=\"email\"\n                    id=\"email\"\n                    placeholder=\"Email Address\"\n                    onChange={event => setEmail(event.target.value)}\n                    value={email}\n                />\n            </FormGroup>\n            <FormGroup>\n                <Input \n                    autoComplete=\"new-password\"\n                    type=\"password\"\n                    name=\"password\"\n                    id=\"password\"\n                    placeholder=\"Enter Password\"\n                    onChange={event => setPassword(event.target.value)}\n                    value={password}\n                />\n            </FormGroup>\n            <Button\n                disabled={authenticating}\n                color=\"success\"\n                block\n                onClick={() => signInWithEmailAndPassword()}\n            >\n                Login\n            </Button>\n            <small>\n                <p className='m-1 text-center'>Don't have an account? <Link to=\"/register\">Register here.</Link></p>\n                <p className='m-1 text-center'><Link to=\"/forget\">Forget your password?</Link></p>\n            </small>\n            <ErrorText error={error} />\n            <hr className=\"bg-info m-3\" />\n                        <Button block disabled={authenticating} onClick={() => signInWithSocialMedia(Providers.google)} style={{ backgroundColor: '#222454', borderColor: '#222454' }}>\n                            <i className=\"fab fa-google mr-2\"></i> Sign {isLogin ? 'in' : 'up'} with Google\n                        </Button>\n\n                        {authenticating && <LoadingComponent card={false} />}\n                  \n                   \n             \n            </CenterPiece>\n            \n        </Container>\n    );\n};\n\nexport default LoginPage;\n\n// import axios from 'axios';\n// import React, { SyntheticEvent, useState } from 'react'\n// import { Redirect } from 'react-router-dom';\n\n// const Login=()=> {\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [redirect, setRedirect] = useState(false)\n//   const [errors, setError]=useState(\"\")\n\n//   const handleLogin = async (e: SyntheticEvent) => {\n\n//     e.preventDefault();\n//     axios({\n//       url: \"/login\",\n//       method: \"POST\",\n//       data: JSON.stringify({\n//         email,\n//         password,\n//       }),\n//     })\n//       .then(async (res) => {\n//         console.log(res);\n\n//         const content = await res;\n//         const readData=content.data\n//         if (readData.status===200){\n//             setRedirect(true)\n//         }\n//         if(readData.status===401 && readData.message===\"Unauthorized\"){\n//           const response=`Please provide a valid email and password!`\n//           setError(response)\n//         }\n//       })\n//       .catch((err) => {\n//         setError(err.data.message)\n//         console.log(err.data);\n//       });\n\n//   };\n\n//   if(redirect){\n//     return  <Redirect to =\"/\"/>;\n//   }\n\n//     return (\n//       <div>\n//       <div className=\"err\">\n//         {errors}\n//       </div>\n//         <form onSubmit={handleLogin}>\n//         <h1 className=\"h3 mb-3 fw-normal\">Login</h1>\n\n//         <input\n//           type=\"email\"\n//           className=\"form-control\"\n//           placeholder=\"Email address\"\n//           required\n//           onChange={(e) => setEmail(e.target.value)}\n//         />\n\n//         <input\n//           type=\"password\"\n//           className=\"form-control\"\n//           required\n//           placeholder=\"Password\"\n//           onChange={(e) => setPassword(e.target.value)}\n//         />\n\n//         <button\n//           className=\"w-100 btn btn-lg btn-primary custom-btn\"\n//           type=\"submit\"\n//         >\n//           Login\n//         </button>\n//       </form>\n//       </div>\n//     )\n// }\n\n// export default  Login;\n"]},"metadata":{},"sourceType":"module"}