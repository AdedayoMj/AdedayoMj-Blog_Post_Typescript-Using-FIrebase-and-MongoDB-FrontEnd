{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/quiz_run/quizrun/src/pages/login.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\nimport UserContext from '../context/user';\nimport { Authenticate, SignInWithSocialMedia as SocialMediaPopup } from '../modules/auth';\nimport logging from '../config/logging';\nimport CenterPiece from '../components/centerpiece';\nimport { Button, Container, FormGroup, Input } from 'reactstrap';\nimport ErrorText from '../components/error_text';\nimport LoadingComponent from '../components/loading_components';\nimport { auth, Providers } from '../config/firebase'; // import Naviagtion from '../components/navigation';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginPage = props => {\n  _s();\n\n  const [authenticating, setAuthenticating] = useState(false);\n  const [error, setError] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const userContext = useContext(UserContext);\n  const history = useHistory();\n  const isLogin = window.location.pathname.includes('login');\n  const fire_token = localStorage.getItem('fire_token');\n\n  const signInWithEmailAndPassword = () => {\n    if (error !== '') setError('');\n    setAuthenticating(true);\n    auth.signInWithEmailAndPassword(email, password).then(async result => {\n      logging.info(result);\n      let user = result.user;\n\n      if (user) {\n        let uid = user.uid;\n        let name = user.displayName;\n        let email = user.email;\n        let verify = user.emailVerified;\n\n        if (verify === true) {\n          if (name) {\n            try {\n              let fire_token = await user.getIdToken();\n              /**if we get a token, auth with the backup */\n\n              Authenticate(uid, name, email, fire_token, (error, _user) => {\n                if (error) {\n                  setError(error);\n                  setAuthenticating(false);\n                } else if (_user) {\n                  userContext.userDispatch({\n                    type: 'login',\n                    payload: {\n                      user: _user,\n                      fire_token\n                    }\n                  });\n                  history.push('/');\n                }\n              });\n            } catch (error) {\n              setError('Invalid token.');\n              logging.error(error);\n              setAuthenticating(false);\n            }\n          }\n\n          setAuthenticating(false);\n        } else {\n          setError('Please verify your email address');\n          setAuthenticating(false);\n        }\n      } else {\n        setError('Oops!!! Something went wrong please try again');\n        setAuthenticating(false);\n      }\n    }).catch(error => {\n      logging.error(error);\n      setAuthenticating(false);\n      setError(error.message);\n    });\n  };\n\n  const signInWithSocialMedia = provider => {\n    if (error !== '') setError('');\n    setAuthenticating(true);\n    SocialMediaPopup(provider).then(async result => {\n      logging.info(result);\n      let user = result.user;\n\n      if (user) {\n        let uid = user.uid;\n        let name = user.displayName;\n        let email = user.email;\n\n        if (name) {\n          try {\n            let fire_token = await user.getIdToken();\n            /**if we get a token, auth with the backup */\n\n            Authenticate(uid, name, email, fire_token, (error, _user) => {\n              if (error) {\n                setError(error);\n                setAuthenticating(false);\n              } else if (_user) {\n                userContext.userDispatch({\n                  type: 'login',\n                  payload: {\n                    user: _user,\n                    fire_token\n                  }\n                });\n                history.push('/');\n              }\n            });\n          } catch (error) {\n            setError('Invalid token.');\n            logging.error(error);\n            setAuthenticating(false);\n          }\n        } else {\n          /**\n           * We can set these manually with a new form\n           * For example, the Twitter provider sometimes\n           * does not provide a username as some users sign\n           * up with a phone number.  Here you could ask\n           * them to provide a name that would be displayed\n           * on this website.\n           * */\n          setError('The identify provider is missing a display name.');\n          setAuthenticating(false);\n        }\n      } else {\n        setError('The social media provider does not have enough information. Please try a different provider.');\n        setAuthenticating(false);\n      }\n    }).catch(error => {\n      logging.error(error);\n      setAuthenticating(false);\n      setError(error.message);\n    });\n  };\n\n  if (fire_token === null) return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 37\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    className: \"p-0\",\n    children: /*#__PURE__*/_jsxDEV(CenterPiece, {\n      header: \"Login\",\n      children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          type: \"email\",\n          name: \"email\",\n          id: \"email\",\n          placeholder: \"Email Address\",\n          onChange: event => setEmail(event.target.value),\n          value: email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          autoComplete: \"new-password\",\n          type: \"password\",\n          name: \"password\",\n          id: \"password\",\n          placeholder: \"Enter Password\",\n          onChange: event => setPassword(event.target.value),\n          value: password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: authenticating,\n        color: \"success\",\n        block: true,\n        onClick: () => signInWithEmailAndPassword(),\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"m-1 text-center\",\n          children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/register\",\n            children: \"Register here.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 48\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"m-1 text-center\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/forget\",\n            children: \"Forget your password?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ErrorText, {\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"bg-info m-3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        block: true,\n        disabled: authenticating,\n        onClick: () => signInWithSocialMedia(Providers.google),\n        style: {\n          backgroundColor: '#222454',\n          borderColor: '#222454'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fab fa-google mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this), \" Sign \", isLogin ? 'in' : 'up', \" with Google\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), authenticating && /*#__PURE__*/_jsxDEV(LoadingComponent, {\n        card: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 36\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LoginPage, \"K15iiPUW9WcdZbs1qXWcAIWHYBU=\", false, function () {\n  return [useHistory];\n});\n\n_c = LoginPage;\nexport default LoginPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["/Users/macbook/quiz_run/quizrun/src/pages/login.tsx"],"names":["React","useContext","useState","Link","Redirect","useHistory","UserContext","Authenticate","SignInWithSocialMedia","SocialMediaPopup","logging","CenterPiece","Button","Container","FormGroup","Input","ErrorText","LoadingComponent","auth","Providers","LoginPage","props","authenticating","setAuthenticating","error","setError","email","setEmail","password","setPassword","userContext","history","isLogin","window","location","pathname","includes","fire_token","localStorage","getItem","signInWithEmailAndPassword","then","result","info","user","uid","name","displayName","verify","emailVerified","getIdToken","_user","userDispatch","type","payload","push","catch","message","signInWithSocialMedia","provider","event","target","value","google","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\nimport UserContext from '../context/user';\nimport firebase from 'firebase';\nimport IPageProps from '../interfaces/pages';\nimport { Authenticate, SignInWithSocialMedia as SocialMediaPopup } from '../modules/auth';\nimport logging from '../config/logging';\nimport CenterPiece from '../components/centerpiece';\nimport { Button, Container, FormGroup, Input } from 'reactstrap';\nimport ErrorText from '../components/error_text';\nimport LoadingComponent from '../components/loading_components';\nimport { auth, Providers } from '../config/firebase';\n// import Naviagtion from '../components/navigation';\n\nconst LoginPage: React.FunctionComponent<IPageProps> = (props) => {\n    const [authenticating, setAuthenticating] = useState<boolean>(false);\n    const [error, setError] = useState<string>('');\n    const [email, setEmail] = useState<string>('');\n    const [password, setPassword] = useState<string>('');\n\n    const userContext = useContext(UserContext);\n    const history = useHistory();\n    const isLogin = window.location.pathname.includes('login');\n\n    const fire_token = localStorage.getItem('fire_token');\n\n    const signInWithEmailAndPassword = () => {\n        if (error !== '') setError('');\n\n        setAuthenticating(true);\n\n        auth.signInWithEmailAndPassword(email, password)\n            .then(async (result) => {\n                logging.info(result);\n                let user = result.user;\n                if (user) {\n                    let uid = user.uid;\n                    let name = user.displayName;\n                    let email = user.email;\n                    let verify = user.emailVerified;\n                    if (verify === true) {\n                        if (name) {\n                            try {\n                                let fire_token = await user.getIdToken();\n\n                                /**if we get a token, auth with the backup */\n\n                                Authenticate(uid, name, email, fire_token, (error, _user) => {\n                                    if (error) {\n                                        setError(error);\n                                        setAuthenticating(false);\n                                    } else if (_user) {\n                                        userContext.userDispatch({ type: 'login', payload: { user: _user, fire_token } });\n                                        history.push('/');\n                                    }\n                                });\n                            } catch (error) {\n                                setError('Invalid token.');\n                                logging.error(error);\n                                setAuthenticating(false);\n                            }\n                        }\n                        setAuthenticating(false);\n                    } else {\n                        setError('Please verify your email address');\n                        setAuthenticating(false);\n                    }\n                } else {\n                    setError('Oops!!! Something went wrong please try again');\n                    setAuthenticating(false);\n                }\n            })\n            .catch((error) => {\n                logging.error(error);\n                setAuthenticating(false);\n                setError(error.message);\n            });\n    };\n\n    const signInWithSocialMedia = (provider: firebase.auth.AuthProvider) => {\n        if (error !== '') setError('');\n        setAuthenticating(true);\n        SocialMediaPopup(provider)\n            .then(async (result) => {\n                logging.info(result);\n\n                let user = result.user;\n                if (user) {\n                    let uid = user.uid;\n                    let name = user.displayName;\n                    let email = user.email;\n\n                    if (name) {\n                        try {\n                            let fire_token = await user.getIdToken();\n\n                            /**if we get a token, auth with the backup */\n\n                            Authenticate(uid, name, email, fire_token, (error, _user) => {\n                                if (error) {\n                                    setError(error);\n                                    setAuthenticating(false);\n                                } else if (_user) {\n                                    userContext.userDispatch({ type: 'login', payload: { user: _user, fire_token } });\n                                    history.push('/');\n                                }\n                            });\n                        } catch (error) {\n                            setError('Invalid token.');\n                            logging.error(error);\n                            setAuthenticating(false);\n                        }\n                    } else {\n                        /**\n                         * We can set these manually with a new form\n                         * For example, the Twitter provider sometimes\n                         * does not provide a username as some users sign\n                         * up with a phone number.  Here you could ask\n                         * them to provide a name that would be displayed\n                         * on this website.\n                         * */\n                        setError('The identify provider is missing a display name.');\n                        setAuthenticating(false);\n                    }\n                } else {\n                    setError('The social media provider does not have enough information. Please try a different provider.');\n                    setAuthenticating(false);\n                }\n            })\n            .catch((error) => {\n                logging.error(error);\n                setAuthenticating(false);\n                setError(error.message);\n            });\n    };\n\n    if (fire_token === null) return <Redirect to=\"/\" />;\n   \n    return (\n        <Container fluid className=\"p-0\">\n            {/* <Naviagtion /> */}\n            <CenterPiece header=\"Login\">\n                <FormGroup>\n                    <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Email Address\" onChange={(event) => setEmail(event.target.value)} value={email} />\n                </FormGroup>\n                <FormGroup>\n                    <Input\n                        autoComplete=\"new-password\"\n                        type=\"password\"\n                        name=\"password\"\n                        id=\"password\"\n                        placeholder=\"Enter Password\"\n                        onChange={(event) => setPassword(event.target.value)}\n                        value={password}\n                    />\n                </FormGroup>\n                <Button disabled={authenticating} color=\"success\" block onClick={() => signInWithEmailAndPassword()}>\n                    Login\n                </Button>\n                <small>\n                    <p className=\"m-1 text-center\">\n                        Don't have an account? <Link to=\"/register\">Register here.</Link>\n                    </p>\n                    <p className=\"m-1 text-center\">\n                        <Link to=\"/forget\">Forget your password?</Link>\n                    </p>\n                </small>\n                <ErrorText error={error} />\n                <hr className=\"bg-info m-3\" />\n                <Button block disabled={authenticating} onClick={() => signInWithSocialMedia(Providers.google)} style={{ backgroundColor: '#222454', borderColor: '#222454' }}>\n                    <i className=\"fab fa-google mr-2\"></i> Sign {isLogin ? 'in' : 'up'} with Google\n                </Button>\n\n                {authenticating && <LoadingComponent card={false} />}\n            </CenterPiece>\n        </Container>\n    );\n};\n\nexport default LoginPage;\n"]},"metadata":{},"sourceType":"module"}