{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/quiz_run/quizrun/src/pages/reset.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Button, FormGroup, Input, Spinner } from 'reactstrap';\nimport queryString from 'querystring';\nimport CenterPiece from '../components/centerpiece';\nimport logging from '../config/logging';\nimport { auth } from '../config/firebase';\nimport ErrorText from '../components/error_text';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ResetPasswordPage = props => {\n  _s();\n\n  const [verifying, setVerifying] = useState(true);\n  const [verified, setVerified] = useState(false);\n  const [changing, setChanging] = useState(false);\n  const [password, setPassword] = useState('');\n  const [confirm, setConfirm] = useState('');\n  const [oobCode, setOobCode] = useState('');\n  const [error, setError] = useState('');\n  const history = useHistory();\n  useEffect(() => {\n    logging.info('Extracting code');\n    let stringParams = queryString.parse(props.location.search);\n\n    if (stringParams) {\n      let oobCode = stringParams.oobCode;\n\n      if (oobCode) {\n        logging.info('Code found');\n        verifyPasswordResetLink(oobCode);\n      } else {\n        logging.error('Unable to find code');\n        setVerified(false);\n        setVerifying(false);\n      }\n    } else {\n      logging.error('Unable to find code');\n      setVerified(false);\n      setVerifying(false);\n    } // eslint-disable-next-line\n\n  }, []);\n\n  const verifyPasswordResetLink = _oobCode => {\n    auth.verifyPasswordResetCode(_oobCode).then(result => {\n      logging.info(result);\n      setOobCode(_oobCode);\n      setVerified(true);\n      setVerifying(false);\n    }).catch(error => {\n      logging.error(error);\n      setVerified(false);\n      setVerifying(false);\n    });\n  };\n\n  const passwordResetRequest = () => {\n    if (password !== confirm) {\n      setError('Make sure your passwords are matching');\n      return;\n    }\n\n    if (error !== '') setError('');\n    setChanging(true);\n    auth.confirmPasswordReset(oobCode, password).then(() => {\n      history.push('/login');\n    }).catch(error => {\n      logging.error(error);\n      setError(error.message);\n      setChanging(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(CenterPiece, {\n    header: \"Change Password\",\n    children: verifying ? /*#__PURE__*/_jsxDEV(Spinner, {\n      color: \"info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: verified ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please enter a strong password.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            autoComplete: \"new-password\",\n            type: \"password\",\n            name: \"password\",\n            id: \"password\",\n            placeholder: \"Enter Password\",\n            onChange: event => setPassword(event.target.value),\n            value: password\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            autoComplete: \"new-password\",\n            type: \"password\",\n            name: \"confirm\",\n            id: \"confirm\",\n            placeholder: \"Confirm Password\",\n            onChange: event => setConfirm(event.target.value),\n            value: confirm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: changing,\n          color: \"success\",\n          block: true,\n          onClick: () => passwordResetRequest(),\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(ErrorText, {\n          error: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Invalid link.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 25\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ResetPasswordPage, \"nHZc8bOI1aeXRez+b9dcDaCjawE=\", false, function () {\n  return [useHistory];\n});\n\n_c = ResetPasswordPage;\nexport default ResetPasswordPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPasswordPage\");","map":{"version":3,"sources":["/Users/macbook/quiz_run/quizrun/src/pages/reset.tsx"],"names":["React","useEffect","useState","useHistory","Button","FormGroup","Input","Spinner","queryString","CenterPiece","logging","auth","ErrorText","ResetPasswordPage","props","verifying","setVerifying","verified","setVerified","changing","setChanging","password","setPassword","confirm","setConfirm","oobCode","setOobCode","error","setError","history","info","stringParams","parse","location","search","verifyPasswordResetLink","_oobCode","verifyPasswordResetCode","then","result","catch","passwordResetRequest","confirmPasswordReset","push","message","event","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { RouteComponentProps, useHistory } from 'react-router-dom';\nimport { Button, FormGroup, Input, Spinner } from 'reactstrap';\n\n\n\nimport queryString from 'querystring';\n\nimport IPageProps from '../interfaces/pages';\nimport CenterPiece from '../components/centerpiece';\nimport logging from '../config/logging';\nimport { auth } from '../config/firebase';\nimport ErrorText from '../components/error_text';\n\nconst ResetPasswordPage: React.FunctionComponent<IPageProps & RouteComponentProps> = props => {\n    const [verifying, setVerifying] = useState<boolean>(true);\n    const [verified, setVerified] = useState<boolean>(false);\n    const [changing, setChanging] = useState<boolean>(false);\n    const [password, setPassword] = useState<string>('');\n    const [confirm, setConfirm] = useState<string>('');\n    const [oobCode, setOobCode] = useState<string>('');\n    const [error, setError] = useState<string>('');\n\n    const history = useHistory();\n \n    useEffect(() => {\n        logging.info('Extracting code');\n\n        let stringParams = queryString.parse(props.location.search);\n\n        if (stringParams)\n        {\n            let oobCode = stringParams.oobCode as string;\n\n            if (oobCode)\n            {\n                logging.info('Code found');\n                verifyPasswordResetLink(oobCode);\n            }\n            else\n            {\n                logging.error('Unable to find code');\n                setVerified(false);\n                setVerifying(false);\n            }\n        }\n        else\n        {\n            logging.error('Unable to find code');\n            setVerified(false);\n            setVerifying(false);\n        }\n        // eslint-disable-next-line\n    }, []);\n    const verifyPasswordResetLink = (_oobCode: string) => {\n        auth.verifyPasswordResetCode(_oobCode)\n        .then(result => {\n            logging.info(result);\n            setOobCode(_oobCode);\n            setVerified(true);\n            setVerifying(false);\n        })\n        .catch(error => {\n            logging.error(error);\n            setVerified(false);\n            setVerifying(false);\n        });\n    }\n\n    const passwordResetRequest = () => {\n        if (password !== confirm)\n        {\n            setError('Make sure your passwords are matching');\n            return;\n        }\n\n        if (error !== '') setError('');\n\n        setChanging(true);\n\n        auth.confirmPasswordReset(oobCode, password)\n        .then(() => {\n            history.push('/login');\n        })\n        .catch(error => {\n            logging.error(error);\n            setError(error.message);\n            setChanging(false);\n        })\n    }\n\n \n    return (\n        <CenterPiece header=\"Change Password\">\n          {verifying ?\n                <Spinner color=\"info\" />\n            :\n                <>\n                    {verified ?\n                        <>\n                            <p>Please enter a strong password.</p>\n                            <FormGroup>\n                                <Input \n                                    autoComplete=\"new-password\"\n                                    type=\"password\"\n                                    name=\"password\"\n                                    id=\"password\"\n                                    placeholder=\"Enter Password\"\n                                    onChange={event => setPassword(event.target.value)}\n                                    value={password}\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <Input \n                                    autoComplete=\"new-password\"\n                                    type=\"password\"\n                                    name=\"confirm\"\n                                    id=\"confirm\"\n                                    placeholder=\"Confirm Password\"\n                                    onChange={event => setConfirm(event.target.value)}\n                                    value={confirm}\n                                />\n                            </FormGroup>\n                            <Button\n                                disabled={changing}\n                                color=\"success\"\n                                block\n                                onClick={() => passwordResetRequest()}\n                            >\n                                Reset Password\n                            </Button>\n                            <ErrorText error={error} />\n                        </>\n                    :\n                        <p>Invalid link.</p>\n                    }\n                </>\n            }\n    </CenterPiece>\n    );\n}\n\nexport default ResetPasswordPage;"]},"metadata":{},"sourceType":"module"}