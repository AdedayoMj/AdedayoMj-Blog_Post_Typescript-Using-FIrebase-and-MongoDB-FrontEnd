{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/quiz_run/quizrun/src/application.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport routes from './config/routes';\nimport { initialUserState, userReducer } from './context/user';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Application = props => {\n  _s();\n\n  const [userState, userDispatch] = useReducer(userReducer, initialUserState);\n  /**Used for debugging */\n\n  const [authStage, setAuthStage] = useState('Checking localstorage ...');\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setTimeout(() => {\n      CheckLocalStorageForCredentials();\n    }, 1000); // eslint-disable-next-line\n  }, []);\n  /**\n   * check to use if we have a token\n   * if we do, verify it with the backend\n   * if not, we are logged out initially\n   */\n\n  const CheckLocalStorageForCredentials = () => {\n    setAuthStage('Checking credentials ...');\n    const fire_token = localStorage.getItem('fire_token');\n\n    if (fire_token === null) {\n      userDispatch({\n        type: 'logout',\n        payload: initialUserState\n      });\n      setAuthStage('No credentials found');\n      setTimeout(() => {\n        setLoading(false);\n      }, 500);\n    } else {\n      setAuthStage('Credentials found, validating ...');\n      setTimeout(() => {\n        setLoading(false);\n      }, 1000); // return Validate(fire_token, (error, user) => {\n      //     if (error)\n      //     {\n      //         logging.error(error);\n      //         userDispatch({ type: 'logout', payload: initialUserState });\n      //         setLoading(false);\n      //     }\n      //     else if (user)\n      //     {\n      //         userDispatch({ type: 'login', payload: { user, fire_token } });\n      //         setLoading(false);\n      //     }\n      // })\n    }\n  };\n\n  const userContextValues = {\n    userState,\n    userDispatch\n  }; // if (loading)\n  // {\n  //     return <LoadingComponent>{authStage}</LoadingComponent>;\n  // }\n\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: routes.map((route, index) => {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        exact: route.exact,\n        path: route.path,\n        render: routeProps => /*#__PURE__*/_jsxDEV(route.component, { ...routeProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 70\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Application, \"oMVoAyTZ7BtKSd8SmWHxhkAgSHE=\");\n\n_c = Application;\nexport default Application;\n\nfunction CheckLocalStorageForCredentials() {\n  throw new Error('Function not implemented.');\n}\n\n_c2 = CheckLocalStorageForCredentials;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Application\");\n$RefreshReg$(_c2, \"CheckLocalStorageForCredentials\");","map":{"version":3,"sources":["/Users/macbook/quiz_run/quizrun/src/application.tsx"],"names":["React","useEffect","useReducer","useState","Route","Switch","routes","initialUserState","userReducer","Application","props","userState","userDispatch","authStage","setAuthStage","loading","setLoading","setTimeout","CheckLocalStorageForCredentials","fire_token","localStorage","getItem","type","payload","userContextValues","map","route","index","exact","path","routeProps","Error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,KAAT,EAAqCC,MAArC,QAAmD,kBAAnD;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,gBAA9C;;;AAKA,MAAMC,WAAuD,GAAGC,KAAK,IAAI;AAAA;;AACrE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,UAAU,CAACM,WAAD,EAAcD,gBAAd,CAA5C;AACA;;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAS,2BAAT,CAA1C;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAU,IAAV,CAAtC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZgB,IAAAA,UAAU,CAAC,MAAM;AACbC,MAAAA,+BAA+B;AAClC,KAFS,EAEP,IAFO,CAAV,CADY,CAKZ;AACH,GANQ,EAMN,EANM,CAAT;AAQA;AACJ;AACA;AACA;AACA;;AAEI,QAAMA,+BAA+B,GAAG,MAAM;AAC1CJ,IAAAA,YAAY,CAAC,0BAAD,CAAZ;AAEA,UAAMK,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAnB;;AAEA,QAAIF,UAAU,KAAK,IAAnB,EACA;AACIP,MAAAA,YAAY,CAAC;AAAEU,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,OAAO,EAAEhB;AAA3B,OAAD,CAAZ;AACAO,MAAAA,YAAY,CAAC,sBAAD,CAAZ;AACAG,MAAAA,UAAU,CAAC,MAAM;AACbD,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAFS,EAEP,GAFO,CAAV;AAGH,KAPD,MASA;AACIF,MAAAA,YAAY,CAAC,mCAAD,CAAZ;AACAG,MAAAA,UAAU,CAAC,MAAM;AACbD,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAFS,EAEP,IAFO,CAAV,CAFJ,CAKI;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACJ,GAlCD;;AAoCA,QAAMQ,iBAAiB,GAAG;AACtBb,IAAAA,SADsB;AAEtBC,IAAAA;AAFsB,GAA1B,CAxDqE,CA6DrE;AACA;AACA;AACA;;AAGA,sBACI,QAAC,MAAD;AAAA,cACKN,MAAM,CAACmB,GAAP,CAAW,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACtB,0BACI,QAAC,KAAD;AAEA,QAAA,KAAK,EAAED,KAAK,CAACE,KAFb;AAGA,QAAA,IAAI,EAAEF,KAAK,CAACG,IAHZ;AAIA,QAAA,MAAM,EAAGC,UAAD,iBAAqC,QAAC,KAAD,CAAO,SAAP,OAAqBA;AAArB;AAAA;AAAA;AAAA;AAAA;AAJ7C,SACKH,KADL;AAAA;AAAA;AAAA;AAAA,cADJ;AAQH,KATJ;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH,CAlFD;;GAAMlB,W;;KAAAA,W;AAoFN,eAAeA,WAAf;;AAEA,SAASS,+BAAT,GAA2C;AACvC,QAAM,IAAIa,KAAJ,CAAU,2BAAV,CAAN;AACH;;MAFQb,+B","sourcesContent":["import React, { useEffect, useReducer, useState } from 'react'\nimport { Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport routes from './config/routes';\nimport { initialUserState, userReducer } from './context/user';\n\n\nexport interface IApplicationProps{}\n\nconst Application: React.FunctionComponent<IApplicationProps> = props => {\n    const [userState, userDispatch] = useReducer(userReducer, initialUserState);\n    /**Used for debugging */\n    const [authStage, setAuthStage] = useState<string>('Checking localstorage ...');\n    const [loading, setLoading] = useState<boolean>(true);\n\n    useEffect(() => {\n        setTimeout(() => {\n            CheckLocalStorageForCredentials();\n        }, 1000);\n\n        // eslint-disable-next-line\n    }, []);\n\n    /**\n     * check to use if we have a token\n     * if we do, verify it with the backend\n     * if not, we are logged out initially\n     */\n\n    const CheckLocalStorageForCredentials = () => {\n        setAuthStage('Checking credentials ...');\n\n        const fire_token = localStorage.getItem('fire_token');\n\n        if (fire_token === null)\n        {\n            userDispatch({ type: 'logout', payload: initialUserState });\n            setAuthStage('No credentials found');\n            setTimeout(() => {\n                setLoading(false);\n            }, 500);\n        }\n        else\n        {\n            setAuthStage('Credentials found, validating ...')\n            setTimeout(() => {\n                setLoading(false);\n            }, 1000);\n            // return Validate(fire_token, (error, user) => {\n            //     if (error)\n            //     {\n            //         logging.error(error);\n            //         userDispatch({ type: 'logout', payload: initialUserState });\n            //         setLoading(false);\n                    \n            //     }\n            //     else if (user)\n            //     {\n            //         userDispatch({ type: 'login', payload: { user, fire_token } });\n            //         setLoading(false);\n            //     }\n            // })\n        }\n    }\n\n    const userContextValues = {\n        userState,\n        userDispatch\n    };\n\n    // if (loading)\n    // {\n    //     return <LoadingComponent>{authStage}</LoadingComponent>;\n    // }\n\n\n    return(\n        <Switch>\n            {routes.map((route, index) => {\n                    return(\n                        <Route\n                        key={index}\n                        exact={route.exact}\n                        path={route.path}\n                        render={(routeProps: RouteComponentProps) => <route.component {...routeProps} />}\n                        />\n                    )\n                })\n            }\n        </Switch>\n    )\n}\n\nexport default Application;\n\nfunction CheckLocalStorageForCredentials() {\n    throw new Error('Function not implemented.');\n}\n"]},"metadata":{},"sourceType":"module"}